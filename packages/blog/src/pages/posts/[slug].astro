---
import { CollectionEntry, getCollection } from 'astro:content'
import Posts from '@layouts/Posts.astro'
import PostDetails from '@layouts/PostDetails.astro'
import sortPostsByPart from '@utils/getSortedPosts'
import getPageNumbers from '@utils/getPageNumbers'
import slugify from '@utils/slugify'
import { SITE } from '@config'
import getSstTutorialTitles from '@utils/getSstTutorialTitles'

export interface Props {
  post: CollectionEntry<'sst'>
}

export async function getStaticPaths() {
  const posts = await getCollection('sst')

  const postResult = posts.map((post) => ({
    params: { slug: slugify(post.data) },
    props: { post },
  }))

  const pagePaths = getPageNumbers(posts.length).map((pageNum) => ({
    params: { slug: String(pageNum) },
  }))

  return [...postResult, ...pagePaths]
}

const { slug } = Astro.params
const { post } = Astro.props

const posts = await getCollection('sst')
  .then(sortPostsByPart)
  .then(getSstTutorialTitles)

const nextPost = posts.find(
  (next) => next.data.postNumber === post?.data.postNumber + 1,
)

const prevPost = posts.find(
  (prev) => prev.data.postNumber === post?.data.postNumber - 1,
)

const totalPages = getPageNumbers(posts.length)

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0
const lastPost = currentPage * SITE.postPerPage
const startPost = lastPost - SITE.postPerPage

const paginatedPosts = posts.slice(startPost, lastPost)
---

{
  post ? (
    <PostDetails post={post} next={nextPost} prev={prevPost} />
  ) : (
    <Posts
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
